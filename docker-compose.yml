services:
  app:
    depends_on:
      postgres:
        condition: service_healthy
    image: docuseal/docuseal:latest
    user: ${PUID:-1000}:${PGID:-1000}
    security_opt:
      - "no-new-privileges:true"
    cap-drop:
      - SETUID
      - SETGID
    expose:
      - 3000
    #ports:
      #- 3000:3000
    volumes:
      - .:/data
    networks:
      - default
      - traefik-proxy
    environment:
      - FORCE_SSL=${DOMAIN:?DOMAIN not set}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/docuseal
      - GOTENBERG_URLS=http://gotenberg:3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docuseal.entrypoints=websecure"
      - "traefik.http.routers.docuseal.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.docuseal.tls.certresolver=http-challenge"

  postgres:
    image: postgres:15
    volumes:
      - './pg_data:/var/lib/postgresql/data'
    networks:
      - default
    user: ${PUID:-1000}:${PGID:-1000}
    security_opt:
      - "no-new-privileges:true"
    cap-drop:
      - SETUID
      - SETGID
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: docuseal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

#  caddy:
#    image: caddy:latest
#    command: caddy reverse-proxy --from $HOST --to app:3000
#    ports:
#      - 80:80
#      - 443:443
#      - 443:443/udp
#    volumes:
#      - .:/data
#    environment:
#      - HOST=${HOST}

networks:
  default:
  traefik-proxy:
    name: traefik-proxy
    external: true
